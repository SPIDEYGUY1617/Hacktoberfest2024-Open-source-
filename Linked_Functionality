class Node:
    def __init__(self, data):
        self.data = data  # Store the data
        self.next = None  # Pointer to the next node

class LinkedList:
    def __init__(self):
        self.head = None  # Initialize the head of the list as None

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:  # If the list is empty, set the head to the new node
            self.head = new_node
        else:
            temp = self.head
            while temp.next:  # Traverse to the last node
                temp = temp.next
            temp.next = new_node  # Add new node at the end

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head  # Point new node's next to current head
        self.head = new_node  # Move head to the new node

    def insert_after_node(self, prev_node_data, data):
        temp = self.head
        while temp:  # Traverse to the node after which new node is to be inserted
            if temp.data == prev_node_data:
                break
            temp = temp.next
        if temp is None:
            print(f"Node with data {prev_node_data} not found")
            return
        new_node = Node(data)
        new_node.next = temp.next  # Point new node's next to current node's next
        temp.next = new_node  # Update current node's next to the new node

    def delete_node(self, key):
        temp = self.head
        if temp and temp.data == key:  # If the node to be deleted is the head
            self.head = temp.next
            temp = None
            return
        prev = None
        while temp and temp.data != key:  # Traverse to the node to be deleted
            prev = temp
            temp = temp.next
        if temp is None:  # If the key was not present in the list
            print(f"Node with data {key} not found")
            return
        prev.next = temp.next  # Unlink the node from the list
        temp = None

    def search(self, key):
        temp = self.head
        while temp:  # Traverse to find the key
            if temp.data == key:
                return True
            temp = temp.next
        return False

    def update(self, old_data, new_data):
        temp = self.head
        while temp:  # Traverse to the node with old_data
            if temp.data == old_data:
                temp.data = new_data
                return
            temp = temp.next
        print(f"Node with data {old_data} not found")

    def display(self):
        temp = self.head
        if temp is None:
            print("List is empty")
            return
        while temp:  # Traverse and print the data in the list
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# Example usage:
ll = LinkedList()
ll.insert_at_end(1)
ll.insert_at_end(2)
ll.insert_at_end(3)
ll.insert_at_beginning(0)
ll.insert_after_node(2, 2.5)
ll.display()  # Output: 0 -> 1 -> 2 -> 2.5 -> 3 -> None

ll.delete_node(2)
ll.display()  # Output: 0 -> 1 -> 2.5 -> 3 -> None

print(ll.search(1))  # Output: True
print(ll.search(5))  # Output: False

ll.update(2.5, 5)
ll.display()  # Output: 0 -> 1 -> 5 -> 3 -> None
